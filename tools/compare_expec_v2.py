'''
This code checks the consistency of data in two expect.t generated by MCEND.

The main idea is to focus on the relative ratio of difference, e.g., 3%. 
The criteria consists with five parts:
  1. If two expect.t have the same number of lines
  2. If each line has the same number of entries
  3. If the absolute values of an entry in two expec.t are smaller than a given threshold, OK
  4. For the variables are OK the part 3, if the difference of absolte values
  of two variables is smaller than the a given threshold
  
  #ratio of the smaller absolute
  value variable, OK.
  #5. If the absolute value of one entry is smaller than the given threshold
     but the other is equal or greater, use 4. But, this can lead to overflow.
     
Hence, it will report the case when the difference in ratio is larger than a given threshold
and the absolute value is greater than another given threshold.

The style is roughly checked pylint which includes PEP (Python Enhancement Proposal) 8.
not sure if this is good.

not sure about the filename: compare_expect.., pylint prefers snake_case style,
developers.google.com/style/filenames, hyphen is prefered than underscores.

not sure if I should put everything inside a function to let 'constant' be
lower case.

So far, the input is inside the source code, from FILENAME_0 and FILENAME_1

have not been thoroughly tested yet.

Cong Wang
Dec-20-2020
'''

import sys

#print(sys.argv)

FILENAME_0 = sys.argv[1]
FILENAME_1 = sys.argv[2]


#print(FILENAME_0, FILENAME_1)

#FILENAME_0 = "expec.t_hpcc"
#FILENAME_0 = "expec.t"
#FILENAME_1 = "expec.t_origin"
#FILENAME_1 = "expec.t_hpcc_new_o1"
#FILENAME_1 = "expec.t_hpcc"

#print( 'here' )
#FILENAME_0 = "expec.t_hpcc_new_o1_1sec"
#FILENAME_1 = "expec.t"

#FILENAME_1 = "expec.t1"

THRESHOLD_1 = 1.e-5
THRESHOLD_2 = 0.05

FLAG_G = 0

with open(FILENAME_0) as f_0:
    LINES_0 = f_0.readlines()

with open(FILENAME_1) as f_1:
    LINES_1 = f_1.readlines()

    if len(LINES_1) != len(LINES_0):
        # rule 1
        print('inconsistent number of lines in two files')
        FLAG_G = 1
        print('inconsistency number of lines in two files')

    for (n, line) in enumerate(LINES_1):
        if n in [0,1]:
            continue

        data_0 = LINES_0[n].split(' ')
        data_0 = list(filter(None, data_0))
        data_0 = [float(i) for i in data_0]

        data_1 = LINES_1[n].split(' ')
        data_1 = list(filter(None, data_1))
        data_1 = [float(i) for i in data_1]


        if len(data_0) != len(data_1):
            # rule 2
            print('inconsistent number of entries in line', n)
            FLAG_G = 1
            print('inconsistency number of entries in line', n)

        for (m, datum) in enumerate(data_0):


            #print('m',m,datum)

            flag = 0

            # <x,y,z> * -nel will let -ref data not comparable 
            if m in [2,3,4]:
                continue  

            # four cases, maybe better written in switch-case style
            # maybe I need exception
            # < < ; < >=; >= <; >= >=
            # rule 3
            if abs(data_0[m]) < THRESHOLD_1 and abs(data_1[m]) < THRESHOLD_1:
                #print(' skip small entries', n, LINES_0[n])
                continue

            # rule 5
            if abs(data_0[m]) < THRESHOLD_1 <= abs(data_1[m]):
                print('interesting', n, LINES_0[n], LINES_1[n])
                flag = 1

            if abs(data_1[m]) < THRESHOLD_1 <= abs(data_0[m]):
                print('interesting', n, LINES_0[n], LINES_1[n])
                flag = 1


            if abs(data_0[m]) >= THRESHOLD_1 and abs(data_1[m]) >= THRESHOLD_1:
                flag = 1

            if flag == 1:
                #smaller = min(abs(data_0[m]), abs(data_1[m]))
                diff = abs(data_0[m]) - abs(data_1[m])
                diff = abs(diff)
                # rule 4
                #print(n, diff/smaller)

                #if diff/smaller >= THRESHOLD_2:
                #    print('WARNING', LINES_0[n], LINES_1[n])
                  #  print('WARNING', LINES_0[n], LINES_1[n])
                #Q    print('WARNING', n, data_0[m],data_1[m])
                #    FLAG_G = 1
                
                
                if diff >= THRESHOLD_1:
                    FLAG_G = 1
                    print('WARNING', LINES_0[n], LINES_1[n])

if FLAG_G == 0:
    print('Consistent')
